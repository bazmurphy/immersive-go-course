services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
     - zookeeper1
    healthcheck:
      # i searched around and although this is basic it works for now...
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
  
  admin1:
    build:
      context: admin
      dockerfile: ../Dockerfile
    hostname: admin1
    container_name: admin1
    command: >
      --topics "cluster-a,cluster-b"
      --partitions 2
    depends_on:
      kafka1:
        condition: service_healthy

  producer1:
    build:
      context: producer
      dockerfile: ../Dockerfile
    hostname: producer1
    container_name: producer1
    volumes:
      - ./producer/customcrontab:/app/customcrontab
    command: >
      --path "customcrontab"
    depends_on:
      admin1:
        condition: service_completed_successfully

  consumer1:
    build:
      context: consumer
      dockerfile: ../Dockerfile
    hostname: consumer1
    container_name: consumer1
    command: >
      --topic "cluster-a"
    depends_on:
      admin1:
        condition: service_completed_successfully
  
  consumer2:
    build:
      context: consumer
      dockerfile: ../Dockerfile
    hostname: consumer2
    container_name: consumer2
    command: >
      --topic "cluster-a-retry"
    depends_on:
      admin1:
        condition: service_completed_successfully

  consumer3:
    build:
      context: consumer
      dockerfile: ../Dockerfile
    hostname: consumer3
    container_name: consumer3
    command: >
      --topic "cluster-b"
    depends_on:
      admin1:
        condition: service_completed_successfully

  consumer4:
    build:
      context: consumer
      dockerfile: ../Dockerfile
    hostname: consumer4
    container_name: consumer4
    command: >
      --topic "cluster-b-retry"
    depends_on:
      admin1:
        condition: service_completed_successfully